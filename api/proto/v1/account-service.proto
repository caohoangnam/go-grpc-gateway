syntax = "proto3";

package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Account service";
		version: "1.0";
		contact: {
			name: "go-grpc-gateway";
			url: "https://github.com/caohoangnam/go-grpc-gateway";
			email: "caohoangnam114@gmail.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

message Account {
	int64 Id = 1;
	string Owner = 2;
	double Balance = 3;
	double Currency = 4;
	
	//Date and time to reminder
	google.protobuf.Timestamp CreatedAt = 5;
	google.protobuf.Timestamp UpdatedAt = 6;
}

message CreateAccountRequest {
	string api = 1;

	//Task entity to add
	Account account = 2;
}

message CreateAccountResponse {
	string api = 1;
	int64 id = 2;
}

message ReadAccountRequest {
	string api = 1;
	int64 id = 2;
}

message ReadAccountResponse {
	string api = 1;
	Account account = 2;
}

message UpdateAccountRequest {
	string api = 1;
	Account account = 2;
}

message UpdateAccountResponse {
	string api = 1;
	int64 updatedAt = 2;
}

service AccountService {
	rpc Create(CreateAccountRequest) returns (CreateAccountResponse){
		option (google.api.http) = {
			post: "/v1/account"
			body: "*"
		};
	};

	rpc Read(ReadAccountRequest) returns (ReadAccountResponse){
		option (google.api.http) = {
			get: "/v1/account/{id}"
		};
	};

	rpc Update(UpdateAccountRequest) returns (UpdateAccountResponse){
		option (google.api.http) = {
			put: "/v1/account/{account.Id}"
			body: "*"
			additional_bindings {
				patch: "/v1/account/{account.Id}"
				body: "*"
			}
		};
	};
}
